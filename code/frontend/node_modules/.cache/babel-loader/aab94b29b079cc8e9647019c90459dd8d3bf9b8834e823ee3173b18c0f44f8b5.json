{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import {\n//     Box,\n//     TextField,\n//     Button,\n//     Typography,\n//     Paper,\n//     List,\n//     ListItem,\n//     ListItemText,\n//     CircularProgress\n// } from '@mui/material';\n// import axios from '../utils/axiosConfig';\n// import { toast } from 'react-toastify';\n\n// const Chat = () => {\n//     const [messages, setMessages] = useState([]);\n//     const [input, setInput] = useState('');\n//     const [isLoading, setIsLoading] = useState(false);\n\n//     useEffect(() => {\n//         const fetchWelcomeMessage = async () => {\n//             try {\n//                 const response = await axios.get('/chat', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 const { message, preview } = response.data;\n//                 setMessages([\n//                     { sender: 'system', text: message },\n//                     { sender: 'system', text: `Dataset Preview:\\n${JSON.stringify(preview, null, 2)}` }\n//                 ]);\n//             } catch (error) {\n//                 toast.error('Failed to fetch welcome message');\n//             }\n//         };\n//         fetchWelcomeMessage();\n//     }, []);\n\n//     const handleSendMessage = async () => {\n//         if (!input.trim()) {\n//             toast.error('Please enter a valid command.');\n//             return;\n//         }\n\n//         setIsLoading(true);\n\n//         try {\n//             const response = await axios.post(\n//                 '/transform',\n//                 { command: input },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n\n//             setMessages((prev) => [\n//                 ...prev,\n//                 { sender: 'user', text: input },\n//                 { sender: 'ai', text: response.data.message },\n//                 { sender: 'ai', text: `Preview:\\n${JSON.stringify(response.data.preview, null, 2)}` }\n//             ]);\n//             setInput('');\n//         } catch (error) {\n//             toast.error(error.response?.data?.message || 'Failed to apply transformation');\n//         } finally {\n//             setIsLoading(false);\n//         }\n//     };\n\n//     return (\n//         <Box\n//             sx={{\n//                 height: '100vh',\n//                 display: 'flex',\n//                 flexDirection: 'column',\n//                 justifyContent: 'center',\n//                 alignItems: 'center',\n//                 backgroundColor: '#3E2723', // Dark brown background for contrast\n//             }}\n//         >\n//             <Paper\n//                 elevation={6}\n//                 sx={{\n//                     width: '100%',\n//                     maxWidth: 800,\n//                     height: '80%',\n//                     display: 'flex',\n//                     flexDirection: 'column',\n//                     borderRadius: 2,\n//                     backgroundColor: '#D84315', // Deep red/orange background\n//                     color: '#fff',\n//                 }}\n//             >\n//                 <Typography\n//                     variant=\"h5\"\n//                     textAlign=\"center\"\n//                     sx={{\n//                         padding: 2,\n//                         borderBottom: '1px solid #E64A19',\n//                         backgroundColor: '#BF360C', // Darker red for header\n//                     }}\n//                 >\n//                     Chat with Intelligent Service\n//                 </Typography>\n//                 <Box sx={{ flex: 1, overflowY: 'auto', padding: 2 }}>\n//                     <List>\n//                         {messages.map((message, index) => (\n//                             <ListItem key={index} sx={{ justifyContent: message.sender === 'user' ? 'flex-end' : 'flex-start' }}>\n//                                 <Paper\n//                                     elevation={3}\n//                                     sx={{\n//                                         padding: 1.5,\n//                                         maxWidth: '70%',\n//                                         borderRadius: '15px',\n//                                         backgroundColor: message.sender === 'user' ? '#FF7043' : '#F57C00', // Warm shades of orange/red\n//                                         color: message.sender === 'user' ? '#fff' : '#000',\n//                                     }}\n//                                 >\n//                                     <ListItemText primary={message.text} />\n//                                 </Paper>\n//                             </ListItem>\n//                         ))}\n//                     </List>\n//                 </Box>\n//                 <Box\n//                     sx={{\n//                         display: 'flex',\n//                         padding: 2,\n//                         backgroundColor: '#BF360C', // Dark red for the input bar\n//                         borderTop: '1px solid #E64A19',\n//                         alignItems: 'center',\n//                     }}\n//                 >\n//                     <TextField\n//                         placeholder=\"Type a command... (e.g., 'Remove rows where column A > 5')\"\n//                         fullWidth\n//                         value={input}\n//                         onChange={(e) => setInput(e.target.value)}\n//                         sx={{\n//                             backgroundColor: '#F57C00', // Orange\n//                             borderRadius: 1,\n//                             input: { color: '#fff' },\n//                         }}\n//                         disabled={isLoading}\n//                     />\n//                     <Button\n//                         variant=\"contained\"\n//                         color=\"secondary\"\n//                         onClick={handleSendMessage}\n//                         disabled={isLoading}\n//                         sx={{\n//                             marginLeft: 2,\n//                             textTransform: 'none',\n//                             backgroundColor: '#D84315', // Red\n//                             '&:hover': { backgroundColor: '#BF360C' },\n//                         }}\n//                     >\n//                         {isLoading ? <CircularProgress size={24} color=\"inherit\" /> : 'Send'}\n//                     </Button>\n//                 </Box>\n//             </Paper>\n//         </Box>\n//     );\n// };\n\n// export default Chat;","map":{"version":3,"names":[],"sources":["/Users/rafaykhan/Desktop/CU Boulder/Fall 2024/Data Center Scale Computing/Project/code/frontend_new/src/components/Chat.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import {\n//     Box,\n//     TextField,\n//     Button,\n//     Typography,\n//     Paper,\n//     List,\n//     ListItem,\n//     ListItemText,\n//     CircularProgress\n// } from '@mui/material';\n// import axios from '../utils/axiosConfig';\n// import { toast } from 'react-toastify';\n\n// const Chat = () => {\n//     const [messages, setMessages] = useState([]);\n//     const [input, setInput] = useState('');\n//     const [isLoading, setIsLoading] = useState(false);\n\n//     useEffect(() => {\n//         const fetchWelcomeMessage = async () => {\n//             try {\n//                 const response = await axios.get('/chat', {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n//                 const { message, preview } = response.data;\n//                 setMessages([\n//                     { sender: 'system', text: message },\n//                     { sender: 'system', text: `Dataset Preview:\\n${JSON.stringify(preview, null, 2)}` }\n//                 ]);\n//             } catch (error) {\n//                 toast.error('Failed to fetch welcome message');\n//             }\n//         };\n//         fetchWelcomeMessage();\n//     }, []);\n\n//     const handleSendMessage = async () => {\n//         if (!input.trim()) {\n//             toast.error('Please enter a valid command.');\n//             return;\n//         }\n\n//         setIsLoading(true);\n\n//         try {\n//             const response = await axios.post(\n//                 '/transform',\n//                 { command: input },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n\n//             setMessages((prev) => [\n//                 ...prev,\n//                 { sender: 'user', text: input },\n//                 { sender: 'ai', text: response.data.message },\n//                 { sender: 'ai', text: `Preview:\\n${JSON.stringify(response.data.preview, null, 2)}` }\n//             ]);\n//             setInput('');\n//         } catch (error) {\n//             toast.error(error.response?.data?.message || 'Failed to apply transformation');\n//         } finally {\n//             setIsLoading(false);\n//         }\n//     };\n\n//     return (\n//         <Box\n//             sx={{\n//                 height: '100vh',\n//                 display: 'flex',\n//                 flexDirection: 'column',\n//                 justifyContent: 'center',\n//                 alignItems: 'center',\n//                 backgroundColor: '#3E2723', // Dark brown background for contrast\n//             }}\n//         >\n//             <Paper\n//                 elevation={6}\n//                 sx={{\n//                     width: '100%',\n//                     maxWidth: 800,\n//                     height: '80%',\n//                     display: 'flex',\n//                     flexDirection: 'column',\n//                     borderRadius: 2,\n//                     backgroundColor: '#D84315', // Deep red/orange background\n//                     color: '#fff',\n//                 }}\n//             >\n//                 <Typography\n//                     variant=\"h5\"\n//                     textAlign=\"center\"\n//                     sx={{\n//                         padding: 2,\n//                         borderBottom: '1px solid #E64A19',\n//                         backgroundColor: '#BF360C', // Darker red for header\n//                     }}\n//                 >\n//                     Chat with Intelligent Service\n//                 </Typography>\n//                 <Box sx={{ flex: 1, overflowY: 'auto', padding: 2 }}>\n//                     <List>\n//                         {messages.map((message, index) => (\n//                             <ListItem key={index} sx={{ justifyContent: message.sender === 'user' ? 'flex-end' : 'flex-start' }}>\n//                                 <Paper\n//                                     elevation={3}\n//                                     sx={{\n//                                         padding: 1.5,\n//                                         maxWidth: '70%',\n//                                         borderRadius: '15px',\n//                                         backgroundColor: message.sender === 'user' ? '#FF7043' : '#F57C00', // Warm shades of orange/red\n//                                         color: message.sender === 'user' ? '#fff' : '#000',\n//                                     }}\n//                                 >\n//                                     <ListItemText primary={message.text} />\n//                                 </Paper>\n//                             </ListItem>\n//                         ))}\n//                     </List>\n//                 </Box>\n//                 <Box\n//                     sx={{\n//                         display: 'flex',\n//                         padding: 2,\n//                         backgroundColor: '#BF360C', // Dark red for the input bar\n//                         borderTop: '1px solid #E64A19',\n//                         alignItems: 'center',\n//                     }}\n//                 >\n//                     <TextField\n//                         placeholder=\"Type a command... (e.g., 'Remove rows where column A > 5')\"\n//                         fullWidth\n//                         value={input}\n//                         onChange={(e) => setInput(e.target.value)}\n//                         sx={{\n//                             backgroundColor: '#F57C00', // Orange\n//                             borderRadius: 1,\n//                             input: { color: '#fff' },\n//                         }}\n//                         disabled={isLoading}\n//                     />\n//                     <Button\n//                         variant=\"contained\"\n//                         color=\"secondary\"\n//                         onClick={handleSendMessage}\n//                         disabled={isLoading}\n//                         sx={{\n//                             marginLeft: 2,\n//                             textTransform: 'none',\n//                             backgroundColor: '#D84315', // Red\n//                             '&:hover': { backgroundColor: '#BF360C' },\n//                         }}\n//                     >\n//                         {isLoading ? <CircularProgress size={24} color=\"inherit\" /> : 'Send'}\n//                     </Button>\n//                 </Box>\n//             </Paper>\n//         </Box>\n//     );\n// };\n\n// export default Chat;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}